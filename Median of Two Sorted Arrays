class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {

        //binary search //striver
        //t.c = log2(min(n1,n2))   s.c=O(1)
        if(nums2.size()<nums1.size()) return findMedianSortedArrays(nums2,nums1); //try to do binary search for the smaller size array
        int n1=nums1.size();
        int n2=nums2.size();

        int low=0,high=n1;

        while(low<=high){
            int cut1=(low+high) >> 1; //it's similar to the finding of the average of two numbers low and high i.e doing "/" operation
            int cut2=(n1+n2+1)/2-cut1;  //it's applicable to both even and odd  -> (n1+n2+1)/2
            int left1 = cut1 == 0 ? INT_MIN : nums1[cut1-1];
            int left2 = cut2 == 0 ? INT_MIN : nums2[cut2-1];

            int right1 = cut1 == n1 ? INT_MAX : nums1[cut1];
            int right2 = cut2 == n2 ? INT_MAX : nums2[cut2];

            if(left1<=right2 && left2<=right1){
                if((n1+n2) % 2 == 0){
                    return (max(left1,left2)+min(right1,right2))/2.0;
                }
                else{
                    return max(left1,left2);
                }
            }
            else if(left1>right2){
                high=cut1-1;
            } 
            else{ //if(left1<right2)
                low=cut1+1;
            }
        }
        return 0.0;
    }
};


class Solution {
public:  // BRUTE FORCE APPROACH
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> temp;

        for(auto i:nums1){
          temp.push_back(i);
        }
        for(auto i:nums2){
          temp.push_back(i);
        }

        sort(temp.begin(),temp.end());

        int  n=temp.size();

        return n%2 ? temp[n/2]:(temp[n/2-1]+temp[n/2])/2.0;  //if n is odd , median will be the middle element; otherwise it will be the average of the middle two elements
    }
};
