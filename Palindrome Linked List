/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {      //  SEE STRIVERS VIDEO FOR BETTER UNDERSTSNDING
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL||head->next==NULL){
            return true;
        }
        ListNode* slow = head;
        ListNode* fast = head;
        //finding the middle of the linkedlist
        while(fast->next!=NULL&&fast->next->next!=NULL) {
        slow = slow->next;
        fast = fast->next->next;
        }

        //reversing the right half
        slow->next = reverseList(slow->next);

        slow = slow->next;   //move slow to right half
        ListNode* dummy = head;   //maintaining a dummy pointer at the head of the LL to check further

        while(slow!=NULL) {      //checking that right half and left half are equal or not
        if(dummy->val != slow->val) return false;
        dummy = dummy->next;
        slow = slow->next;
        }
        return true;

    }


   //CODE for reversing the LL
    ListNode* reverseList(ListNode* head){
        ListNode* pre = NULL;
        ListNode* next = NULL;
        while(head!=NULL){
            next=head->next;
            head->next=pre;
            pre=head;
            head=next;
        }
        return pre;
    }



};
