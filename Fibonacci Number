class Solution {  //striver dp series
public:
    /*
    int fib(int n) {                //recursion solution
        if(n<=1){
            return n;
        }                               
        return (fib(n-1)+fib(n-2));
    }
    */


    /*
                                    //memoizing recursive solution  -> three steps
    int fibo(int n , vector<int> & dp) {                 //memoization->top bottom approach
        if(n<=1) return n;   

        if(dp[n]!=-1) return dp[n];   //2.first check whether dp array contains the value or not 
                                      // if it is present then return the value from the dp array

        return dp[n]=fibo(n-1,dp)+fibo(n-2,dp);  //3.if dp arrray not contains the value then first we will be finding the given value for the first time using recursion and also set the dp[n] to the solution we get

        
    }

    int fib(int n){
        vector<int> dp(n+1,-1);   //1.creating a dp array and initializes it with -1

        return fibo(n,dp);
    }
    */

  
        //tabulation -> bottom up appraoch {start from the base case and reach the final answer}
    int fib(int n){
        vector<int> dp(n+1,-1);   //1.creating a dp array and initializes it with -1

        // dp[0] = 0;  //2.initialising the base condition
        // dp[1] = 1;

        //3.traversing the array
        for(int i=0;i<=n;i++){

            if(i<=1){
                dp[i]=i;  //2.initialising the base condition
            }
            else
              dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
  
  
  /*


    // space optimisation method
    int fib(int n){
        int prev2=0;
        int prev1=1;

        if(n==0){
            return 0;
        }


        for(int i=2;i<=n;i++){
            int curr = prev2+prev1;
            prev2=prev1;
            prev1=curr;
        }

        return prev1;
    }

   */   

};
