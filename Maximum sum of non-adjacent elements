#include <bits/stdc++.h>    //srivers dp 



/*
                            // tle so do memoiation 
  // memoization
int f(int ind , vector<int> &nums , vector<int> &dp){
    if (ind==0) return nums[ind];
    if(ind<0) return 0;

    if(dp[ind]!=-1) return dp[ind];

    int pick = nums[ind]+f(ind-2,nums,dp);
    int notpick = 0 + f(ind-1,nums,dp);

    return dp[ind] = max(pick,notpick);

}
int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    vector<int> dp(n,-1);
    return f(n-1,nums,dp); //starting from the last index
}



  // tabulaation approach -> bottom up approach i.e starting from the base case

int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    vector<int> dp(n,-1);

    dp[0] = nums[0];
    //int negInd = 0;

    for(int i=1;i<n;i++){
        int pick = nums[i]; 
           if(i>1) pick+=dp[i-2];  //taking care of negative index

        int notpick = 0 + dp[i-1];

        dp[i] = max(pick,notpick);
    }
    return dp[n-1]; 
}
*/

//space optimisatoin approach

int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    vector<int> dp(n,-1);

    int prev = nums[0];
    int prev2 = 0;

    for(int i=1;i<n;i++){
        int pick = nums[i]; 
           if(i>1) pick+=prev2;  //taking care of negative index

        int notpick = 0 + prev;

        int curr_i = max(pick,notpick);
        
        prev2=prev;
        prev=curr_i;
    }
    return prev; 
}
