class Solution {
public:
    
    /*
    //using recursion
    //t.c: 2^(m*n)  s.c:O(path length)=O(m-1 + n-1)
    //TLE because of exponential t.c //hence we'll use memoization to resolve tle
    int f(int i,int j, vector<vector<int>>& obstacleGrid ){
            if(i>=0 && j>=0 && obstacleGrid[i][j]==1) return 0;  //if any obstacle in a valid cell

            if(i==0 && j==0) return 1;
            if(i<0 || j<0) return 0;
            
            int up=f(i-1,j,obstacleGrid);
            int left=f(i,j-1,obstacleGrid);
            return  (up+left);
        }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        
        return f(m-1,n-1,obstacleGrid);
    }
    */


    /*
    //using recursion + memoization(to resove TLE)
    //t.c:O(n*m) //s.c:O(m-1 + n-1) + O(n*m) -> path length + dp array
    int f(int i,int j, vector<vector<int>>& obstacleGrid , vector<vector<int>> &dp){
            if(i>=0 && j>=0 && obstacleGrid[i][j]==1) return 0;  //if any obstacle in a valid cell
            
            if(i==0 && j==0) return 1;
            if(i<0 || j<0) return 0;
            
            if(dp[i][j]!=-1) return dp[i][j];
            int up=f(i-1,j,obstacleGrid,dp);
            int left=f(i,j-1,obstacleGrid,dp);
            return  dp[i][j]=up+left;
        }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return f(m-1,n-1,obstacleGrid,dp);//declaring 2-d array  //memoization
    }
    */

    /*
    //using tabulation (bottom up apraoch) //to further remove space complexity of recursion stack space
    //t.c:O(n*m)   s.c:O(n*m)
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        int dp[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(obstacleGrid[i][j]==1) dp[i][j]=0;
                else if(i==0 && j==0) dp[i][j]=1;
                else{
                    int up=0;
                    int left=0;
                    if(i>0) up=dp[i-1][j];
                    if(j>0) left=dp[i][j-1];
                    dp[i][j]=up+left;
                }
            }
        }
        return dp[m-1][n-1];
    }
    */

    //now further using space optimisation 
    //t.c:O(n*m)   s.c:O(n)
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<int> prev(n,0);
        for(int i=0;i<m;i++){
            vector<int> curr(n,0); //current row which is being computed
            for(int j=0;j<n;j++){
                if(obstacleGrid[i][j]==1) curr[j]=0;
                else if(i==0 && j==0) curr[j]=1;
                else{
                    int up=0;
                    int left=0;
                    if(i>0) up=prev[j];
                    if(j>0) left=curr[j-1];
                   curr[j]=up+left;
                }
            }
            prev=curr;
        }
        return prev[n-1];
    }


};
