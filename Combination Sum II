class Solution {                   
public:
    void findCombination(int indices, int target, vector<int>& arr, vector<vector<int>>& ans,vector<int>& ds){

        if(target == 0){                //valid case
            ans.push_back(ds);    
            return;
        }
        for(int i=indices;i<arr.size();i++){
            if(i>indices && arr[i]==arr[i-1]) continue;
            if(arr[i]>target) break;
            ds.push_back(arr[i]);
            findCombination(i+1,target-arr[i],arr,ans,ds);
            ds.pop_back();
        }
    }


    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;
        vector<int> ds;  //data sructure
        findCombination(0,target,candidates,ans,ds);  //recursive call   // starting from 0 indices
        return ans; 
    }
};
