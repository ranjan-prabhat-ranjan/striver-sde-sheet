class Solution {  
public:


/*    //using recursion
    //t.c: 2^(1+2+..+n)  s.c:O(n)
    //TLE because of exponential t.c //hence we'll use memoization to resolve tle
    int f(int i,int j,vector<vector<int>>& triangle,int n){
        if(i==n-1) return triangle[n-1][j];

        int down = triangle[i][j]+f(i+1,j,triangle,n);
        int diagonal = triangle[i][j]+f(i+1,j+1,triangle,n);

        return min(down,diagonal);
    }


    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        return f(0,0,triangle,n);
    }
*/

/*
    //using recursion + MEMOIZATION(to resove TLE)
    //t.c:O(n*n) //s.c:O(n) + O(n*n) -> recursion stack space + dp array
       int f(int i,int j,vector<vector<int>>& triangle,int n,vector<vector<int>> &dp){
        if(i==n-1) return triangle[n-1][j];

        if(dp[i][j]!=-1) return dp[i][j];
        int down = triangle[i][j]+f(i+1,j,triangle,n,dp);
        int diagonal = triangle[i][j]+f(i+1,j+1,triangle,n,dp);

        return dp[i][j] = min(down,diagonal);
    }


    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return f(0,0,triangle,n,dp);
    }
    */


/*
    //using tabulation (bottom up apraoch) //to further remove space complexity of recursion stack space
    //t.c:O(n*n)   s.c:O(n*n)
   int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,0));
        for(int j=0;j<n;j++) dp[n-1][j]=triangle[n-1][j];     //filling last row
        for(int i=n-2;i>=0;i--){  // since we've already filled last row;so, now check from 2nd last row and moving upward 
            for(int j=i;j>=0;j--){
                int down = triangle[i][j]+dp[i+1][j];
                int diagonal = triangle[i][j]+dp[i+1][j+1];
                dp[i][j]=min(down,diagonal);
            }
        }
        return dp[0][0];
    }
*/


    //now further using space optimisation 
    //t.c:O(n*n)   s.c:O(n)
   int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<int> front(n,0),curr(n,0);  //front row and current row
        vector<vector<int>> dp(n,vector<int>(n,0));
        for(int j=0;j<n;j++) front[j]=triangle[n-1][j];     //dp[n-1]->front  //filling last row
        for(int i=n-2;i>=0;i--){  // since we've already filled last row;so, now check from 2nd last row and moving upward 
            for(int j=i;j>=0;j--){
                int down = triangle[i][j]+front[j];  //dp[i+1]->front
                int diagonal = triangle[i][j]+front[j+1];  //dp[i+1]->front
                curr[j]=min(down,diagonal);  //dp[i]->curr
            }
            front = curr;
        }
        return front[0];  //dp[0]-> front row where final value will be stored
    }

};
